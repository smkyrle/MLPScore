'''
This script filters out decoys generated by DeepCoy which have
a higher number of rotatable bonds than a user defined threshold
and produces new .smi files of the remaining decoys for
evaluation
'''

import os
from tqdm import tqdm
import pandas as pd
import shutil
import sys
import rdkit
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import rdFMCS

def calc_rots(smi): # calculate number of rotatable bonds in a smile

    # load molecule from smile
    mol = Chem.MolFromSmiles(smi)

    # calc num rots
    num_rot = Chem.rdMolDescriptors.CalcNumRotatableBonds(mol)

    return num_rot


def load_smiles_to_df(smiles_file): # parses active and paired decoy smile into dataframe

    # set up lists for populating
    file_actives = list()
    file_decoys = list()

    # extract active and decoy from line of smile file
    print(f'Loading smiles from {smiles_file}...')
    with open(smiles_file, 'r') as text:
        lines = text.read()
        for line in lines.split('\n'):
            try:
                active, decoy = line.split(' ')[0], line.split(' ')[1]
                file_actives.append(active)
                file_decoys.append(decoy)
            except:
                pass

    # load actives and decoy smiles into df
    df = pd.DataFrame({'active':file_actives, 'decoys':file_decoys})
    print(len(df))

    return df

def output_smiles_for_re_evaluation(smiles_file, raw_output_folder, cleaned_output_folder, num_rot_thresh): # find decoys with over num_rot_thresh rotatable bonds and remove them

    # load smiles
    raw_df = load_smiles_to_df(f'{raw_output_folder}{smiles_file}')
    original_len = len(raw_df)
    print(f'Loaded {original_len} decoys for filtering...')

    # calculate rotatable bonds in all generated decoys
    raw_df['num_rots'] = raw_df['decoys'].apply(calc_rots)

    # filter decoys with too many rotatable bonds
    raw_df = raw_df.loc[raw_df['num_rots'] <= num_rot_thresh]
    print(f'Removed {(original_len - len(raw_df))} decoys with more than {num_rot_thresh} rotatable bonds')

    print('Writing cleaned outfile...')
    # write to new file for evaluation by DeepCoy
    with open(f'{cleaned_output_folder}{smiles_file}','a+') as final:
        for active, decoy in zip(list(raw_df['active']), list(raw_df['decoys'])):
            final.write(f'{active} {decoy}\n')
        final.close()

def parse_args(args): # parse CLI user inputs

    num_rot_thresh = int(args[args.index('-num_rots') + 1])

    return num_rot_thresh

def main(): # run script using CLI

    num_rot_thresh = parse_args(sys.argv)

    os.mkdir('screened_output') # make output directory

    for smiles_file in os.listdir('output/'): # screen each output .smi file
        output_smiles_for_re_evaluation(smiles_file, 'output/','screened_output/', num_rot_thresh)

if __name__ == '__main__':
    main()
